pipeline {
    agent {
        label 'jenkins-agent'
    }
    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '3'))
    }

    environment {
        SSHOME = tool 'sonar-scanner'
        DOCKER_REGISTRY_CREDS = credentials('docker-creds')
    }

    stages {
        stage("App code Checkout") {
            steps {
                git branch: 'main', url: 'https://github.com/anujsankdecha/kubernetes-cluster-project.git'
            }
        }

        stage("Sonar Analysis") {
            steps {
                dir('src/') {
                    withSonarQubeEnv('sonar-server') {
                        sh """ 
                            $SSHOME/bin/sonar-scanner \
                            -Dsonar.projectKey=villa-agency-project-ci \
                            -Dsonar.projectName=villa-agency-project-ci \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=\${SONAR_HOST_URL} \
                            -Dsonar.login=\${SONAR_AUTH_TOKEN}
                        """  
                    }
                }
            }
        }

        stage('QualityGate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage("Scan CODEFS") {
            steps {
                sh "trivy fs --exit-code 0 src/ > /tmp/trivyscanfs-${BUILD_NUMBER}.txt 2>&1 || true"
                sh "cat /tmp/trivyscanfs-${BUILD_NUMBER}.txt"
            }
        }

        stage("Build Image") {
            steps {
                script {
                    // Check if Dockerfile exists
                    sh "ls -la Dockerfile || echo 'Dockerfile not found'"
                    sh "docker build -t anujgajjar/villaimage:${BUILD_NUMBER} ."
                }
            }
        }

        stage("Scan Image Trivy") {
            steps {
                sh "trivy image --exit-code 0 anujgajjar/villaimage:${BUILD_NUMBER} > /tmp/trivyscan-${BUILD_NUMBER}.txt 2>&1 || true"
                sh "cat /tmp/trivyscan-${BUILD_NUMBER}.txt"
            }
        }

        stage("Image Push to Registry") {
            steps {
                script {
                    sh "docker login -u $DOCKER_REGISTRY_CREDS_USR -p $DOCKER_REGISTRY_CREDS_PSW"
                    sh "docker push anujgajjar/villaimage:${BUILD_NUMBER}"
                    sh "docker rmi anujgajjar/villaimage:${BUILD_NUMBER}"
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed - Build ${BUILD_NUMBER}"
            // Cleanup trivy scan files
            sh "rm -f /tmp/trivyscan*.txt || true"
        }
        success {
            echo "Pipeline succeeded!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}