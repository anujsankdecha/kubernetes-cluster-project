pipeline {
    agent {
        label 'jenkins-agent'
    }
    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '3'))
    }

    environment {
        DOCKER_REGISTRY_CREDS = credentials('docker-creds')
    }

    stages {
        stage("App code Checkout") {
            steps {
                git branch: 'main', url: 'https://github.com/anujsankdecha/kubernetes-cluster-project.git'
            }
        }

        stage("Verify Tools") {
            steps {
                script {
                    // Check if required tools are available
                    sh '''
                        echo "=== Checking Required Tools ==="
                        which docker && docker --version || echo "Docker not found"
                        which trivy && trivy --version || echo "Trivy not found"
                        which sonar-scanner && sonar-scanner --version || echo "SonarScanner not found in PATH"
                    '''
                }
            }
        }

        stage("Sonar Analysis") {
            steps {
                dir('src/') {
                    withSonarQubeEnv('sonar-server') {
                        sh """ 
                            # Use sonar-scanner directly from PATH
                            sonar-scanner \
                            -Dsonar.projectKey=villa-agency-project \
                            -Dsonar.projectName=villa-agency-project \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=\${SONAR_HOST_URL} \
                            -Dsonar.login=\${SONAR_AUTH_TOKEN} \
                            -Dsonar.projectVersion=${BUILD_NUMBER}
                        """  
                    }
                }
            }
        }

        stage('QualityGate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage("Scan CODEFS") {
            steps {
                sh "trivy fs --exit-code 0 --no-progress src/ > /tmp/trivyscanfs-${BUILD_NUMBER}.txt 2>&1 || true"
                sh "cat /tmp/trivyscanfs-${BUILD_NUMBER}.txt"
                archiveArtifacts artifacts: "/tmp/trivyscanfs-${BUILD_NUMBER}.txt", fingerprint: true
            }
        }

        stage("Build Image") {
            steps {
                script {
                    // Better Dockerfile check
                    sh """
                        find . -name 'Dockerfile' -type f | head -1 || echo 'Dockerfile not found in current directory'
                        ls -la | grep -i docker || echo 'No Docker related files found'
                    """
                    sh "docker build -t anujgajjar/villaimage:${BUILD_NUMBER} ."
                }
            }
        }

        stage("Scan Image Trivy") {
            steps {
                sh "trivy image --exit-code 0 --no-progress anujgajjar/villaimage:${BUILD_NUMBER} > /tmp/trivyscan-${BUILD_NUMBER}.txt 2>&1 || true"
                sh "cat /tmp/trivyscan-${BUILD_NUMBER}.txt"
                archiveArtifacts artifacts: "/tmp/trivyscan-${BUILD_NUMBER}.txt", fingerprint: true
            }
        }

        stage("Image Push to Registry") {
            steps {
                script {
                    // More secure docker login
                    sh "echo \$DOCKER_REGISTRY_CREDS_PSW | docker login -u \$DOCKER_REGISTRY_CREDS_USR --password-stdin"
                    sh "docker push anujgajjar/villaimage:${BUILD_NUMBER}"
                    // Cleanup local image
                    sh "docker rmi anujgajjar/villaimage:${BUILD_NUMBER} || true"
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed - Build ${BUILD_NUMBER}"
            // Safe cleanup
            sh """
                rm -f /tmp/trivyscanfs-${BUILD_NUMBER}.txt 2>/dev/null || true
                rm -f /tmp/trivyscan-${BUILD_NUMBER}.txt 2>/dev/null || true
            """
        }
        success {
            echo "Pipeline succeeded!"
            // Optional: Send success notification
        }
        failure {
            echo "Pipeline failed!"
            // Optional: Send failure notification
        }
    }
}